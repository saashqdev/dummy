/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-postgres'
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  serial,
  varchar,
  timestamp,
  boolean,
  numeric,
  jsonb,
  pgEnum,
} from '@payloadcms/db-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-postgres/drizzle'
export const enum_users_role = pgEnum('enum_users_role', ['admin', 'user', 'demo'])
export const enum_roles_type = pgEnum('enum_roles_type', [
  'engineering',
  'management',
  'marketing',
  'finance',
  'sales',
])

export const users_role = pgTable(
  'users_role',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_users_role('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('users_role_order_idx').on(columns.order),
    parentIdx: index('users_role_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [users.id],
      name: 'users_role_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const users_tenants = pgTable(
  'users_tenants',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    tenant: integer('tenant_id')
      .notNull()
      .references(() => tenants.id, {
        onDelete: 'set null',
      }),
    role: integer('role_id')
      .notNull()
      .references(() => roles.id, {
        onDelete: 'set null',
      }),
  },
  (columns) => ({
    _orderIdx: index('users_tenants_order_idx').on(columns._order),
    _parentIDIdx: index('users_tenants_parent_id_idx').on(columns._parentID),
    users_tenants_tenant_idx: index('users_tenants_tenant_idx').on(columns.tenant),
    users_tenants_role_idx: index('users_tenants_role_idx').on(columns.role),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [users.id],
      name: 'users_tenants_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const users_sessions = pgTable(
  'users_sessions',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
    expiresAt: timestamp('expires_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
  },
  (columns) => ({
    _orderIdx: index('users_sessions_order_idx').on(columns._order),
    _parentIDIdx: index('users_sessions_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [users.id],
      name: 'users_sessions_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    username: varchar('username'),
    firstName: varchar('first_name'),
    lastName: varchar('last_name'),
    phone: varchar('phone'),
    avatarUrl: varchar('avatar_url'),
    defaultTenantId: varchar('default_tenant_id'),
    locale: varchar('locale'),
    verifyToken: varchar('verify_token'),
    passwordHash: varchar('password_hash').notNull(),
    onboarded: boolean('onboarded').default(false),
    admin: boolean('admin').notNull().default(false),
    active: boolean('active').notNull().default(false),
    deletedAt: timestamp('deleted_at', { mode: 'string', withTimezone: true, precision: 3 }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    enableAPIKey: boolean('enable_a_p_i_key'),
    apiKey: varchar('api_key'),
    apiKeyIndex: varchar('api_key_index'),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_username_idx: uniqueIndex('users_username_idx').on(columns.username),
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const tenants = pgTable(
  'tenants',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    slug: varchar('slug').notNull(),
    subscriptionId: varchar('subscription_id').notNull(),
    icon: varchar('icon'),
    active: boolean('active').notNull().default(false),
    deletedAt: timestamp('deleted_at', { mode: 'string', withTimezone: true, precision: 3 }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    tenants_slug_idx: uniqueIndex('tenants_slug_idx').on(columns.slug),
    tenants_subscription_id_idx: uniqueIndex('tenants_subscription_id_idx').on(
      columns.subscriptionId,
    ),
    tenants_updated_at_idx: index('tenants_updated_at_idx').on(columns.updatedAt),
    tenants_created_at_idx: index('tenants_created_at_idx').on(columns.createdAt),
  }),
)

export const roles = pgTable(
  'roles',
  {
    id: serial('id').primaryKey(),
    tenant: integer('tenant_id').references(() => tenants.id, {
      onDelete: 'set null',
    }),
    name: varchar('name').notNull(),
    description: varchar('description'),
    role_type: varchar('role_type').notNull(),
    assign_to_new_users: boolean('assign_to_new_users').notNull().default(false),
    is_default: boolean('is_default').notNull().default(false),
    order: numeric('order').notNull(),
    roles_create: boolean('roles_create').notNull().default(false),
    roles_update: boolean('roles_update').notNull().default(false),
    roles_read: boolean('roles_read').notNull().default(true),
    roles_delete: boolean('roles_delete').notNull().default(false),
    team_create: boolean('team_create').notNull().default(false),
    team_update: boolean('team_update').notNull().default(false),
    team_read: boolean('team_read').notNull().default(true),
    team_delete: boolean('team_delete').notNull().default(false),
    type: enum_roles_type('type').default('marketing'),
    createdUser: integer('created_user_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    deletedAt: timestamp('deleted_at', { mode: 'string', withTimezone: true, precision: 3 }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    roles_tenant_idx: index('roles_tenant_idx').on(columns.tenant),
    roles_created_user_idx: index('roles_created_user_idx').on(columns.createdUser),
    roles_updated_at_idx: index('roles_updated_at_idx').on(columns.updatedAt),
    roles_created_at_idx: index('roles_created_at_idx').on(columns.createdAt),
  }),
)

export const roles_texts = pgTable(
  'roles_texts',
  {
    id: serial('id').primaryKey(),
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    text: varchar('text'),
  },
  (columns) => ({
    orderParentIdx: index('roles_texts_order_parent_idx').on(columns.order, columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [roles.id],
      name: 'roles_texts_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    tenantsID: integer('tenants_id'),
    rolesID: integer('roles_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_tenants_id_idx: index(
      'payload_locked_documents_rels_tenants_id_idx',
    ).on(columns.tenantsID),
    payload_locked_documents_rels_roles_id_idx: index(
      'payload_locked_documents_rels_roles_id_idx',
    ).on(columns.rolesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    tenantsIdFk: foreignKey({
      columns: [columns['tenantsID']],
      foreignColumns: [tenants.id],
      name: 'payload_locked_documents_rels_tenants_fk',
    }).onDelete('cascade'),
    rolesIdFk: foreignKey({
      columns: [columns['rolesID']],
      foreignColumns: [roles.id],
      name: 'payload_locked_documents_rels_roles_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const relations_users_role = relations(users_role, ({ one }) => ({
  parent: one(users, {
    fields: [users_role.parent],
    references: [users.id],
    relationName: 'role',
  }),
}))
export const relations_users_tenants = relations(users_tenants, ({ one }) => ({
  _parentID: one(users, {
    fields: [users_tenants._parentID],
    references: [users.id],
    relationName: 'tenants',
  }),
  tenant: one(tenants, {
    fields: [users_tenants.tenant],
    references: [tenants.id],
    relationName: 'tenant',
  }),
  role: one(roles, {
    fields: [users_tenants.role],
    references: [roles.id],
    relationName: 'role',
  }),
}))
export const relations_users_sessions = relations(users_sessions, ({ one }) => ({
  _parentID: one(users, {
    fields: [users_sessions._parentID],
    references: [users.id],
    relationName: 'sessions',
  }),
}))
export const relations_users = relations(users, ({ many }) => ({
  role: many(users_role, {
    relationName: 'role',
  }),
  tenants: many(users_tenants, {
    relationName: 'tenants',
  }),
  sessions: many(users_sessions, {
    relationName: 'sessions',
  }),
}))
export const relations_tenants = relations(tenants, () => ({}))
export const relations_roles_texts = relations(roles_texts, ({ one }) => ({
  parent: one(roles, {
    fields: [roles_texts.parent],
    references: [roles.id],
    relationName: '_texts',
  }),
}))
export const relations_roles = relations(roles, ({ one, many }) => ({
  tenant: one(tenants, {
    fields: [roles.tenant],
    references: [tenants.id],
    relationName: 'tenant',
  }),
  createdUser: one(users, {
    fields: [roles.createdUser],
    references: [users.id],
    relationName: 'createdUser',
  }),
  _texts: many(roles_texts, {
    relationName: '_texts',
  }),
}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    tenantsID: one(tenants, {
      fields: [payload_locked_documents_rels.tenantsID],
      references: [tenants.id],
      relationName: 'tenants',
    }),
    rolesID: one(roles, {
      fields: [payload_locked_documents_rels.rolesID],
      references: [roles.id],
      relationName: 'roles',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))

type DatabaseSchema = {
  enum_users_role: typeof enum_users_role
  enum_roles_type: typeof enum_roles_type
  users_role: typeof users_role
  users_tenants: typeof users_tenants
  users_sessions: typeof users_sessions
  users: typeof users
  tenants: typeof tenants
  roles: typeof roles
  roles_texts: typeof roles_texts
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  relations_users_role: typeof relations_users_role
  relations_users_tenants: typeof relations_users_tenants
  relations_users_sessions: typeof relations_users_sessions
  relations_users: typeof relations_users
  relations_tenants: typeof relations_tenants
  relations_roles_texts: typeof relations_roles_texts
  relations_roles: typeof relations_roles
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
}

declare module '@payloadcms/db-postgres' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
